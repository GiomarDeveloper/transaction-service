openapi: 3.0.3
info:
  title: Transaction Service API
  version: 1.0.0
  description: API para gestionar transacciones bancarias
  contact:
    name: Giomar Limo
  license:
    name: Apache 2.0
servers:
  - url: http://localhost:8084/bank/v1
tags:
  - name: transaction-api
    description: Operations related to bank transactions

paths:
  /transactions:
    get:
      tags: [transaction-api]
      summary: Get all transactions
      operationId: getAll
      parameters:
        - name: customerId
          in: query
          required: false
          schema: { type: string }
        - name: productType
          in: query
          required: false
          schema: { $ref: '#/components/schemas/ProductTypeEnum' }
        - name: productId
          in: query
          required: false
          schema: { type: string }
        - name: startDate
          in: query
          required: false
          schema:
            type: string
            format: date
            example: "2024-10-01"
        - name: endDate
          in: query
          required: false
          schema:
            type: string
            format: date
            example: "2024-10-31"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/TransactionResponse' }

  /transactions/deposit:
    post:
      tags: [transaction-api]
      summary: Make a deposit
      operationId: makeDeposit
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DepositRequest' }
      responses:
        '201':
          description: Deposit successful
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TransactionResponse' }

  /transactions/withdrawal:
    post:
      tags: [transaction-api]
      summary: Make a withdrawal
      operationId: makeWithdrawal
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/WithdrawalRequest' }
      responses:
        '201':
          description: Withdrawal successful
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TransactionResponse' }

  /transactions/account/{accountId}:
    get:
      tags: [transaction-api]
      summary: Get transactions by account
      operationId: getByAccount
      parameters:
        - name: accountId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/TransactionResponse' }

  /transactions/credit/{creditId}:
    get:
      tags: [transaction-api]
      summary: Get transactions by credit
      operationId: getByCredit
      parameters:
        - name: creditId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/TransactionResponse' }

  /transactions/customer/{customerId}:
    get:
      tags: [transaction-api]
      summary: Get all customer transactions
      operationId: getByCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/TransactionResponse' }

  /transactions/credit-payment:
    post:
      tags: [transaction-api]
      summary: Make a credit payment
      operationId: makeCreditPayment
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PaymentRequest' }
      responses:
        '201':
          description: Credit payment successful
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TransactionResponse' }

  /transactions/credit-consumption:
    post:
      tags: [transaction-api]
      summary: Make a credit consumption
      operationId: makeCreditConsumption
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ConsumptionRequest' }
      responses:
        '201':
          description: Credit consumption successful
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TransactionResponse' }

  /transactions/transfer:
    post:
      tags: [transaction-api]
      summary: Transfer funds between accounts
      operationId: makeTransfer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        '201':
          description: Transfer successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Transfer failed due to business rules
        '422':
          description: Insufficient funds or account issues

  /transactions/product/{productId}/type/{productType}/current-month:
    get:
      tags: [transaction-api]
      summary: Get product transactions for current month by product type
      operationId: getProductTransactionsForCurrentMonth
      parameters:
        - name: productId
          in: path
          required: true
          schema: { type: string }
        - name: productType
          in: path
          required: true
          schema:
            type: string
            enum: [CUENTA, CREDITO]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResponse'

  /transactions/commissions-report:
    get:
      tags: [transaction-api]
      summary: Get commissions report by product and period
      operationId: getCommissionsReport
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Start date (YYYY-MM-DD)
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: End date (YYYY-MM-DD)
        - name: productType
          in: query
          required: false
          schema:
            type: string
            enum: [CUENTA, CREDITO]
          description: Filter by product type
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommissionReport'

  /transactions/third-party-credit-payment:
    post:
      tags: [transaction-api]
      summary: Make a third party credit payment
      operationId: makeThirdPartyCreditPayment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThirdPartyCreditPaymentRequest'
      responses:
        '201':
          description: Third party credit payment successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Payment failed due to validation errors
        '404':
          description: Credit or payer not found

  /transactions/{productId}/last-movements:
    get:
      tags: [transaction-api]
      summary: Get last 10 movements for a product (debit/credit card)
      operationId: getLast10Movements
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
          description: Product ID (account ID for debit cards, credit ID for credit cards)
        - name: productType
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/ProductTypeEnum'
          description: Type of product (CUENTA for debit cards, CREDITO for credit cards)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LastMovementsResponse'
        '404':
          description: Product not found
        '400':
          description: Invalid product type

components:
  schemas:
    TransactionRequest:
      type: object
      required: [amount, description]
      properties:
        amount:
          type: number
          format: double
          minimum: 0
        description:
          type: string
          maxLength: 255

    DepositRequest:
      allOf:
        - $ref: '#/components/schemas/TransactionRequest'
        - type: object
          required: [accountId]
          properties:
            accountId: { type: string }

    WithdrawalRequest:
      allOf:
        - $ref: '#/components/schemas/TransactionRequest'
        - type: object
          required: [accountId]
          properties:
            accountId: { type: string }

    PaymentRequest:
      allOf:
        - $ref: '#/components/schemas/TransactionRequest'
        - type: object
          required: [creditId]
          properties:
            creditId: { type: string }
            paymentDate:
              type: string
              format: date

    ConsumptionRequest:
      allOf:
        - $ref: '#/components/schemas/TransactionRequest'
        - type: object
          required: [creditId]
          properties:
            creditId: { type: string }
            merchant: { type: string }
            transactionDate:
              type: string
              format: date-time

    TransactionResponse:
      type: object
      properties:
        id: { type: string }
        transactionType: { $ref: '#/components/schemas/TransactionTypeEnum' }
        productType: { $ref: '#/components/schemas/ProductTypeEnum' }
        productId: { type: string }
        customerId: { type: string }
        amount:
          type: number
          format: double
        description: { type: string }
        previousBalance:
          type: number
          format: double
        newBalance:
          type: number
          format: double
        transactionDate:
          type: string
          format: date-time
        status: { $ref: '#/components/schemas/TransactionStatusEnum' }

    TransactionTypeEnum:
      type: string
      enum: [DEPOSITO, RETIRO, PAGO_CREDITO, CONSUMO_TARJETA, PAGO_DEBITO]
      example: DEPOSITO

    ProductTypeEnum:
      type: string
      enum: [CUENTA, CREDITO]
      example: CUENTA

    TransactionStatusEnum:
      type: string
      enum: [COMPLETADO, RECHAZADO, PENDIENTE]
      example: COMPLETADO

    TransferRequest:
      type: object
      required:
        - fromAccountId
        - toAccountId
        - amount
        - description
      properties:
        fromAccountId:
          type: string
          description: ID de la cuenta de origen
        toAccountId:
          type: string
          description: ID de la cuenta de destino
        amount:
          type: number
          format: double
          minimum: 0.01
          description: Monto a transferir
        description:
          type: string
          maxLength: 255
          description: Descripción de la transferencia
        sameBank:
          type: boolean
          description: Indica si es transferencia dentro del mismo banco
          default: true

    CommissionReport:
      type: object
      properties:
        productId:
          type: string
          description: Product ID
        productType:
          type: string
          description: Product type (CUENTA/CREDITO)
        productNumber:
          type: string
          description: Account or credit number
        customerId:
          type: string
          description: Customer ID
        totalCommissions:
          type: number
          format: double
          description: Total commissions in period
        transactionsCount:
          type: integer
          description: Number of transactions with commissions
        period:
          type: string
          description: Period of the report
        details:
          type: array
          items:
            $ref: '#/components/schemas/CommissionDetail'

    CommissionDetail:
      type: object
      properties:
        transactionId:
          type: string
          description: Transaction ID
        transactionDate:
          type: string
          format: date-time
          description: Transaction date
        transactionType:
          type: string
          description: Type of transaction
        amount:
          type: number
          format: double
          description: Transaction amount
        commission:
          type: number
          format: double
          description: Commission applied
        description:
          type: string
          description: Transaction description

    ThirdPartyCreditPaymentRequest:
      type: object
      required:
        - creditId
        - amount
        - payerCustomerId
      properties:
        creditId:
          type: string
          description: ID of the credit to pay
          example: "68fc3c992b86de614b930f61"
        amount:
          type: number
          format: double
          minimum: 0
          description: Payment amount
          example: 500.00
        payerCustomerId:
          type: string
          description: ID of the customer making the payment
          example: "68f9a324386cd871f5082aa1"
        description:
          type: string
          description: Payment description
          example: "Third party payment from family member"
        paymentDate:
          type: string
          format: date
          description: Payment date
          example: "2024-10-25"

    LastMovementsResponse:
      type: object
      properties:
        productId:
          type: string
          description: Product ID
        productType:
          $ref: '#/components/schemas/ProductTypeEnum'
        productNumber:
          type: string
          description: Account number or credit card number
        customerId:
          type: string
          description: Customer ID
        totalMovements:
          type: integer
          description: Total number of movements returned
        movements:
          type: array
          items:
            $ref: '#/components/schemas/MovementDetail'

    MovementDetail:
      type: object
      properties:
        transactionId:
          type: string
          description: Transaction ID
        transactionType:
          $ref: '#/components/schemas/TransactionTypeEnum'
        amount:
          type: number
          format: double
          description: Transaction amount
        description:
          type: string
          description: Transaction description
        transactionDate:
          type: string
          format: date-time
          description: Transaction date and time
        status:
          $ref: '#/components/schemas/TransactionStatusEnum'
        previousBalance:
          type: number
          format: double
          description: Balance before transaction
        newBalance:
          type: number
          format: double
          description: Balance after transaction
